function [interval_list,actual_separation_pole,actual_separation_zero] = ...
         d_shape_04_init_interval_list(in_params,in_data)
     
    separation_pole_max =    in_params.separation_pole_max;
    separation_zero_max =    in_params.separation_zero_max;
    separation_margin =      in_params.separation_margin;
    im_pz_sorted =           in_data.im_pz_sorted;
    pole_zero_combinations = in_data.im_pz_combinations;
    
    [actual_separation_pole,actual_separation_zero] = determine_separations(pole_zero_combinations,...
                                                              separation_pole_max,...
                                                              separation_zero_max,...
                                                              separation_margin);
    
    im_poles = [im_pz_sorted([im_pz_sorted.pole] == 1).value];
    im_zeros = [im_pz_sorted([im_pz_sorted.zero] == 1).value];
    
    pz_interval_border_on_origin = any( [(im_poles+actual_separation_pole)==0,...
                                         (im_poles-actual_separation_pole)==0,...
                                         (im_zeros+actual_separation_zero)==0,...
                                         (im_zeros+actual_separation_zero)==0]);
    
    n_intervals = 5 + 2*length([im_poles,im_zeros]) - pz_interval_border_on_origin;
    
    interval_list = repmat(struct('type',[],...
                                  't',[NaN,NaN],...
                                  't_len',NaN,...
                                  'q',[NaN,NaN],...
                                  'q_len',NaN,...
                                  'density_fct_handle',[],...
                                  'input_fct_handle',[])  ,  n_intervals,1);
end


function [separation_pole,separation_zero] = determine_separations(pole_zero_combinations,...
                                                                   separation_max_pole,...
                                                                   separation_max_zero,...
                                                                   separation_margin)
    
    s_poles = [pole_zero_combinations(:).separation_pole];
    s_zeros = [pole_zero_combinations(:).separation_zero];
    
    nonzero_separation_poles = s_poles(s_poles > 0);
    nonzero_separation_zeros = s_zeros(s_zeros > 0);
    
    separation_pole = min([(1-separation_margin)*nonzero_separation_poles,...
                           separation_max_pole]);
    separation_zero = min([(1-separation_margin)*nonzero_separation_zeros,...
                           separation_max_zero]);
end